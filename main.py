from flask import Flask
import threading
import time
import requests
import pandas as pd
from telegram import Bot

app = Flask(__name__)

# üîê Telegram —Ç–æ–∫–µ–Ω –∏ chat_id
TOKEN = '8127035277:AAGTYZB_0IfIiSCnjL4bUD0KeOIerSWg-eg'
CHAT_ID = '6715517491'
bot = Bot(token=TOKEN)

# ü™ô –°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
COINS = [
    'BTCUSDT','ETHUSDT','SOLUSDT','XRPUSDT','PEPEUSDT',
    'TRUMPUSDT','WIFUSDT','DOGEUSDT','FLOKIUSDT','BONKUSDT'
]
TIMEFRAMES = ['1m', '5m', '15m']

@app.route('/')
def home():
    return '‚úÖ Scalping bot is running!'

@app.route('/test')
def test():
    try:
        bot.send_message(chat_id=CHAT_ID, text='‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!')
        return '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!'
    except Exception as e:
        return f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}'

def get_klines(symbol, interval, limit=100):
    try:
        url = f"https://api.binance.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={limit}"
        response = requests.get(url, timeout=10)
        data = response.json()
        df = pd.DataFrame(data, columns=[
            'time','o','h','l','c','v','x','q','n','taker_base_vol','taker_quote_vol','ignore'
        ])
        df['c'] = df['c'].astype(float)
        df['h'] = df['h'].astype(float)
        df['l'] = df['l'].astype(float)
        df['o'] = df['o'].astype(float)
        return df
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol} {interval}: {e}")
        return pd.DataFrame()

def calculate_rsi(df, period=14):
    delta = df['c'].diff()
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)
    avg_gain = gain.rolling(window=period).mean()
    avg_loss = loss.rolling(window=period).mean()
    rs = avg_gain / avg_loss
    return 100 - (100 / (1 + rs))

def is_bullish_engulfing(df):
    return (
        df.iloc[-2]['c'] < df.iloc[-2]['o'] and
        df.iloc[-1]['c'] > df.iloc[-1]['o'] and
        df.iloc[-1]['c'] > df.iloc[-2]['o'] and
        df.iloc[-1]['o'] < df.iloc[-2]['c']
    )

def is_bearish_engulfing(df):
    return (
        df.iloc[-2]['c'] > df.iloc[-2]['o'] and
        df.iloc[-1]['c'] < df.iloc[-1]['o'] and
        df.iloc[-1]['c'] < df.iloc[-2]['o'] and
        df.iloc[-1]['o'] > df.iloc[-2]['c']
    )

def check_signals():
    while True:
        print("‚ñ∂Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤...")
        for symbol in COINS:
            for tf in TIMEFRAMES:
                try:
                    df = get_klines(symbol, tf)

                    # üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—É—Å—Ç—ã—Ö –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                    if df is None or len(df) < 20:
                        print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} {tf}")
                        continue

                    rsi = calculate_rsi(df).iloc[-1]

                    # üîµ BUY –ø–∞—Ç—Ç–µ—Ä–Ω
                    if is_bullish_engulfing(df):
                        try:
                            bot.send_message(chat_id=CHAT_ID, text=f'üü¢ BUY –ø–∞—Ç—Ç–µ—Ä–Ω: {symbol} ({tf})\n–ü–∞—Ç—Ç–µ—Ä–Ω: –±—ã—á—å–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ')
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ BUY –ø–∞—Ç—Ç–µ—Ä–Ω–∞: {e}")

                    # üî¥ SELL –ø–∞—Ç—Ç–µ—Ä–Ω
                    if is_bearish_engulfing(df):
                        try:
                            bot.send_message(chat_id=CHAT_ID, text=f'üî¥ SELL –ø–∞—Ç—Ç–µ—Ä–Ω: {symbol} ({tf})\n–ü–∞—Ç—Ç–µ—Ä–Ω: –º–µ–¥–≤–µ–∂—å–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ')
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SELL –ø–∞—Ç—Ç–µ—Ä–Ω–∞: {e}")

                    # üìâ RSI –Ω–∏–∑–∫–∏–π
                    if rsi < 40:
                        try:
                            bot.send_message(chat_id=CHAT_ID, text=f'üìâ RSI –Ω–∏–∑–∫–∏–π: {symbol} ({tf})\nRSI = {rsi:.2f}')
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ RSI < 40: {e}")

                    # üìà RSI –≤—ã—Å–æ–∫–∏–π
                    if rsi > 60:
                        try:
                            bot.send_message(chat_id=CHAT_ID, text=f'üìà RSI –≤—ã—Å–æ–∫–∏–π: {symbol} ({tf})\nRSI = {rsi:.2f}')
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ RSI > 60: {e}")

                    # ‚úÖ –°–∏–ª—å–Ω—ã–π BUY —Å–∏–≥–Ω–∞–ª (RSI + –ø–∞—Ç—Ç–µ—Ä–Ω)
                    if is_bullish_engulfing(df) and rsi < 40:
                        try:
                            bot.send_message(
                                chat_id=CHAT_ID,
                                text=f'‚úÖ –°–∏–ª—å–Ω—ã–π BUY —Å–∏–≥–Ω–∞–ª: {symbol} ({tf})\nRSI = {rsi:.2f}\n–ü–∞—Ç—Ç–µ—Ä–Ω: –±—ã—á—å–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ'
                            )
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–ª—å–Ω–æ–≥–æ BUY: {e}")

                    # ‚úÖ –°–∏–ª—å–Ω—ã–π SELL —Å–∏–≥–Ω–∞–ª (RSI + –ø–∞—Ç—Ç–µ—Ä–Ω)
                    elif is_bearish_engulfing(df) and rsi > 60:
                        try:
                            bot.send_message(
                                chat_id=CHAT_ID,
                                text=f'‚úÖ –°–∏–ª—å–Ω—ã–π SELL —Å–∏–≥–Ω–∞–ª: {symbol} ({tf})\nRSI = {rsi:.2f}\n–ü–∞—Ç—Ç–µ—Ä–Ω: –º–µ–¥–≤–µ–∂—å–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ'
                            )
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–ª—å–Ω–æ–≥–æ SELL: {e}")

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {symbol} {tf}: {e}")

        time.sleep(300)  # üîÅ –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–æ–Ω–µ
threading.Thread(target=check_signals, daemon=True).start()

# üöÄ Flask –¥–ª—è Render
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=10000)
